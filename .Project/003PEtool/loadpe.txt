
void AddMessageBoxToSection(char* pbuffer,char* messageBox_title,char* messageBox_content)
{

	if(!pbuffer)
	{
		DbgPrintf(TEXT("get a nullptr.\n"));
		exit(0);
	}
	
	SECTION_HEADER* p_section=nullptr;
	int section_num=GetFileHeadersPtr(pbuffer)->NumberOfSections;
	int virtual_address=0;
	int size_rawdata=0;
	int pointer_rawdata=0;
	int p_MessageBox=(int)MessageBox;
	int foa=0;
	char* p=nullptr;

	int title_rva=0;
	int title_len=strlen(messageBox_title)+1;


	int content_rva=0;
	int content_len=strlen(messageBox_content)+1;
	
	unsigned char shellcode[24]={
			0x6a,0x00,
			0x68,0x00,0x00,0x00,0x00,
			0x68,0x00,0x00,0x00,0x00,
			0x6a,0x00,
			0xe8,0x00,0x00,0x00,0x00,		// 绝对地址
			0xe9,0x00,0x00,0x00,0x00
	};
	int oep=GetOptionalHeadersPtr(pbuffer)->AddressOfEntryPoint;
	int img_base=GetOptionalHeadersPtr(pbuffer)->ImageBase;
	int e8_rva=0;
	int e8_x=0;
	int e9_rva=0;
	int e9_x=0;

	p_section = GetSectionHeadersPtr(pbuffer,0);
	virtual_address=p_section->VirtualAddress;
	size_rawdata=p_section->SizeOfRawData;
	pointer_rawdata=p_section->PointerToRawData;
	foa=size_rawdata+pointer_rawdata;
	
	p=&pbuffer[foa-1-title_len-content_len-24];  //  两个\0

	// copy title and content
	int i=0;
	while(p[i]=messageBox_title[i++]);
	int j=0;
	while(p[i++]=messageBox_content[j++]);

	// deal shellcode
	title_rva=foa-1-title_len-content_len-24-pointer_rawdata; // 得到相对于节的偏移
	title_rva=title_rva+virtual_address; // 得到在内存中的偏移
	title_rva+=img_base;				// 得到虚拟内存地址
	content_rva=foa-1-content_len-24-pointer_rawdata;
	content_rva=content_rva+virtual_address;
	content_rva+=img_base;
	// printf(TEXT("%x,%x\n"),title_rva,content_rva);

	((int*)(&shellcode[3]))[0]=title_rva;
	((int*)(&shellcode[8]))[0]=content_rva;
	// printf(TEXT("%x,%x\n"),shellcode[3],shellcode[4]);

	// deal e8
	e8_rva=foa-1-10-pointer_rawdata;
	e8_rva=e8_rva+virtual_address;
	e8_rva+=img_base;
	e8_x=p_MessageBox-e8_rva-5;
	//printf(TEXT("%x\n"),e8_x);
	((int*)(&shellcode[15]))[0]=e8_x;
	e9_rva=foa-1-5+-pointer_rawdata;
	e9_rva=e9_rva+virtual_address;
	e9_rva+=img_base;
	e9_x=img_base+oep-e9_rva-5;
	//printf(TEXT("%x,%x\n"),e8_x,e9_x);
	((int*)(&shellcode[20]))[0]=e9_x;

	p=&pbuffer[foa-1-24];
	for(i=0;i<24;i++)
	{
		p[i]=shellcode[i];
	}
	
	// deal oep
	foa=foa-1-24-pointer_rawdata;
	foa=foa+virtual_address;
	GetOptionalHeadersPtr(pbuffer)->AddressOfEntryPoint=foa;
}



// Add new section
int AddNewSection(char** fbuffer,DWORD file_size,SECTION_HEADER* new_section_head,char* new_section_buffer,int new_section_size)
{
	if(!fbuffer[0])
	{
		DbgPrintf(TEXT("Get a nullptr.\n"));
		exit(0);
	}

	char* new_fbuffer=nullptr;
	int log_code=0;
	DOS_HEADER* p_dos=GetDosHeadersPtr(fbuffer[0]);
	int dos_e_lfanew=p_dos->e_lfanew;
	SECTION_HEADER* p_section=nullptr;
	int section_num=GetFileHeadersPtr(fbuffer[0])->NumberOfSections;
	int img_size=0;
	// DWORD file_size=GetPE_sectionPtr(fbuffer[0],section_num-1)->PointerToRawData+GetPE_sectionPtr(fbuffer[0],section_num-1)->SizeOfRawData;
	// 使用最后的节的PointerToRawData+SizeOfRawData可能不准确,file_size
	int headers_size=0;
	int i=0;
	int file_align=0;
	int section_align=0;
	if(GetFileHeadersPtr(fbuffer[0])->Machine==0x14c)
	{
		img_size=GetOptionalHeadersPtr(fbuffer[0])->SizeOfImage;
		headers_size=GetOptionalHeadersPtr(fbuffer[0])->SizeOfHeaders;
		file_align=GetOptionalHeadersPtr(fbuffer[0])->FileAlignment;
		section_align=GetOptionalHeadersPtr(fbuffer[0])->SectionAlignment;
	}else{
		img_size=GetOptionalHeaders64Ptr(fbuffer[0])->SizeOfImage;
		headers_size=GetOptionalHeaders64Ptr(fbuffer[0])->SizeOfHeaders;
		file_align=GetOptionalHeaders64Ptr(fbuffer[0])->FileAlignment;
		section_align=GetOptionalHeaders64Ptr(fbuffer[0])->SectionAlignment;
	}
	p_section=GetSectionHeadersPtr(fbuffer[0],section_num-1)+1;
	//printf(TEXT("%d\n"),(int)p_section-(int)fbuffer[0]);
	
	// 节表后有多余空间
	if(headers_size-(int)p_section+(int)fbuffer[0]>80)
	{
		log_code++;
		//printf(TEXT("%d\n"),headers_size-(int)p_section+(int)fbuffer[0]);

		// 判断是否为80个空数据
		for(i=0;i<80;i++)
		{
			if(((char*)p_section)[i]!=0){
				break;
			}
		}
		if(i==80)
		{
			log_code++;
			p_section-=1;

			strcpy((char*)new_section_head->Name,".new");
			new_section_head->Misc.VirtualSize=new_section_size;
			new_section_head->VirtualAddress=img_size;
			// 确保按文件对齐
			new_section_head->SizeOfRawData=AutoAlign(new_section_size,file_align);
			new_section_head->PointerToRawData=p_section->PointerToRawData+p_section->SizeOfRawData;
			new_section_head->Characteristics=0x60000020;

			p_section+=1;

			// 添加新的节表
			memcpy((char*)p_section,(char*)new_section_head,40);

			// 修改NumberOfSections,SizeOfImage
			GetFileHeadersPtr(fbuffer[0])->NumberOfSections+=1;
			if(GetFileHeadersPtr(fbuffer[0])->Machine==0x14c)
			{
				GetOptionalHeadersPtr(fbuffer[0])->SizeOfImage=img_size+AutoAlign(new_section_size,section_align);
			}else{
				GetOptionalHeaders64Ptr(fbuffer[0])->SizeOfImage=img_size+AutoAlign(new_section_size,section_align);
			}

			// 添加新的节
			new_fbuffer=(char*)malloc(file_size+new_section_size);
			if(new_fbuffer)
			{
				log_code++;
				// printf(TEXT("%d\n"),file_size+new_section_size);
				memcpy(new_fbuffer,fbuffer[0],file_size);
				memcpy(&new_fbuffer[file_size],new_section_buffer,new_section_size);
				free(fbuffer[0]);			
				fbuffer[0]=new_fbuffer;
			
			}	
		}
	}

	switch(log_code)
	{
		case 0:
			DbgPrintf(TEXT("PE headers not 80 Byte.\n"));
			break;
		case 1:
			DbgPrintf(TEXT("Not all 0 in 80 Byte.\n"));

			// 判断dos头后的垃圾数据大于80字节，则将nt头到节表的数据向前填充
			if(dos_e_lfanew-64>80)
			{
				for(i=0;i<(int)p_section-(int)fbuffer[0]-dos_e_lfanew;i++)
				{
					fbuffer[0][i+64]=fbuffer[0][i+dos_e_lfanew];
					fbuffer[0][i+dos_e_lfanew]=0;
				}

				p_dos->e_lfanew=64;
				DbgPrintf(TEXT("\nRecursive call Add_NewSection().\n"));
				AddNewSection(fbuffer,file_size,new_section_head,new_section_buffer,new_section_size);
				DbgPrintf(TEXT("\n"));
				DbgPrintf(TEXT("Dos_stub is greater than 80 Byte.\n"));
				return 1;
			}
			DbgPrintf(TEXT("\tFail add section header\n"));
			break;
		case 2:
			DbgPrintf(TEXT("new_fbuffer Don't get enough memory.\n"));
			break;

		default:
			DbgPrintf(TEXT("Written new section into FileBuffer.\n"));
			return 1;
	}
	return 0;
}


// Expand Section
int ExpandSection(char* img_buffer,char* new_section,DWORD new_section_size_,OUT char** new_img_buffer)
{
	if(img_buffer==nullptr)
	{
		DbgPrintf(TEXT("Get a nullptr.\n"));
		return 0;
	}

	int file_align=0;
	int section_align=0;
	DWORD img_size=0;
	int section_num=0;
	DWORD rawdata_size=0;
	DWORD virtual_size=0;
	DWORD new_section_size=new_section_size_;

	FILE_HEADER* p_stdpe=GetFileHeadersPtr(img_buffer);
	OPTIONAL_HEADER* p_optpe=nullptr;
	OPTIONAL_HEADER64* p_optpe64=nullptr;
	SECTION_HEADER* p_section=nullptr;

	section_num=p_stdpe->NumberOfSections;

	if(p_stdpe->Machine==0x14c)
	{
		p_optpe=GetOptionalHeadersPtr(img_buffer);
		file_align=p_optpe->FileAlignment;
		section_align=p_optpe->SectionAlignment;
		img_size=p_optpe->SizeOfImage;
	}else{
		p_optpe64=GetOptionalHeaders64Ptr(img_buffer);
		file_align=p_optpe64->FileAlignment;
		section_align=p_optpe64->SectionAlignment;
		img_size=p_optpe64->SizeOfImage;
	}

	p_section=GetSectionHeadersPtr(img_buffer,section_num-1);
	rawdata_size=p_section->SizeOfRawData;
	virtual_size=p_section->Misc.VirtualSize;
	
	new_section_size+=virtual_size>rawdata_size?AutoAlign(virtual_size,section_align):rawdata_size;
	new_section_size=AutoAlign(AutoAlign(new_section_size,section_align),file_align);
	p_section->SizeOfRawData=new_section_size;
	p_section->Misc.VirtualSize=new_section_size;
	p_section->Characteristics=0x60000020;

	if(p_stdpe->Machine==0x14c)
	{
		p_optpe->SizeOfImage=p_section->VirtualAddress+new_section_size;
		
	}else{
		p_optpe64->SizeOfImage=p_section->VirtualAddress+new_section_size;
	}

	// new image buffer
	new_img_buffer[0]=(char*)malloc(p_section->VirtualAddress+new_section_size);
	if(new_img_buffer)
	{
		memcpy(new_img_buffer[0],img_buffer,img_size);
		if((p_section->VirtualAddress + new_section_size)>= new_section_size_ && new_img_buffer[0]!=nullptr) memcpy(&new_img_buffer[0][img_size],new_section,new_section_size_);
		return 1;
	}

	return 0;

}



// Conbine Section Header
int CombineSection(char* img_buffer)
{
	if(img_buffer==0)
	{
		DbgPrintf(TEXT("Get a nullptr;\n"));
		return 0;
	}

	DWORD file_align=0;
	DWORD section_align=0;
	DWORD max_size=0;
	DWORD headers_size=0;
	DWORD virtual_size=0;
	DWORD rawdata_size=0;
	int section_num=0;
	FILE_HEADER* p_stdpe=nullptr;
	OPTIONAL_HEADER* p_optpe=nullptr;
	OPTIONAL_HEADER64* p_optpe64=nullptr;
	SECTION_HEADER* p_section_1=nullptr;
	SECTION_HEADER* p_section_2=nullptr;
	
	p_stdpe=GetFileHeadersPtr(img_buffer);
	section_num=p_stdpe->NumberOfSections;
	p_section_1=GetSectionHeadersPtr(img_buffer,0);
	p_section_2=GetSectionHeadersPtr(img_buffer,section_num-1);
	virtual_size=p_section_2->Misc.VirtualSize;
	rawdata_size=p_section_2->SizeOfRawData;

	if(p_stdpe->Machine==0x14c)
	{
		p_optpe=GetOptionalHeadersPtr(img_buffer);
		headers_size=p_optpe->SizeOfHeaders;
		file_align=p_optpe->FileAlignment;
		section_align=p_optpe->SectionAlignment;
		
	}else{
		p_optpe64=GetOptionalHeaders64Ptr(img_buffer);
		headers_size=p_optpe64->SizeOfHeaders;
		file_align=p_optpe64->FileAlignment;
		section_align=p_optpe64->SectionAlignment;
	}
	max_size=AutoAlign(virtual_size,section_align);

	p_section_1->Misc.VirtualSize=p_section_2->VirtualAddress+max_size-AutoAlign(headers_size,section_align);
	p_section_1->Misc.VirtualSize=AutoAlign(p_section_1->Misc.VirtualSize,section_align);
	p_section_1->SizeOfRawData=p_section_1->Misc.VirtualSize;
	p_section_1->Characteristics=0xffffffff;
	p_stdpe->NumberOfSections=1;
	
	return 1;
}





// GetFunctionAddrByName(FileBuffer指针，函数名字指针)
char* GetFunAddrByName(char* file_buffer,char* fun_name)
{
	if(file_buffer==nullptr) 
	{
		DbgPrintf(TEXT("get a nullptr.\n"));
		return nullptr;
	}
	DATA_DIRECTORY* p_directory=nullptr;
	EXPORT_DIRECTORY* p_export=nullptr;

	p_directory=GetDirectoryEntryPtr(file_buffer,0);
	p_export=(EXPORT_DIRECTORY*)(&file_buffer[RVAtoFOA(p_directory->VirtualAddress,file_buffer)]);

	if(!p_export)
	{
		DbgPrintf(TEXT("RVAtoFOA UNsuccessfal.\n"));
		return nullptr;
	}
	
	int fun_num=p_export->NumberOfFunctions;
	int name_num=p_export->NumberOfNames;
	void** ptr_fun_addr=(void**)(&file_buffer[RVAtoFOA(p_export->AddressOfFunctions,file_buffer)]);
	char** ptr_name_addr=(char**)(&file_buffer[RVAtoFOA(p_export->AddressOfNames,file_buffer)]);
	short* ptr_ord_addr=(short*)(&file_buffer[RVAtoFOA(p_export->AddressOfNameOrdinals,file_buffer)]);

	// printf(TEXT("debug: %s\n"),fun_name);
	for(int i=0;i<name_num;i++)
	{
		// printf(TEXT("debug: %s\n"),&file_buffer[RVAtoFOA((ULONG64)ptr_name_addr[i],file_buffer)]);
		if(strcmp(&file_buffer[RVAtoFOA((ULONG64)ptr_name_addr[i],file_buffer)],fun_name)==0)
		{
			// printf(TEXT("debug: 0x%08x\n"),RVAtoFOA((ULONG64)ptr_fun_addr[ptr_ord_addr[i]],file_buffer));
			return (char*)(&file_buffer[RVAtoFOA((ULONG64)ptr_fun_addr[ptr_ord_addr[i]],file_buffer)]);
		}
		
	}
	return nullptr;

}



// GetFunAddrByOrdinals(FileBuffer指针，函数名导出序号)
char* GetFunAddrByOrdinal(char* file_buffer,int fun_ord)
{
	if(file_buffer==nullptr) 
	{
		DbgPrintf(TEXT("get a nullptr.\n"));
		return nullptr;
	}
	DATA_DIRECTORY* p_directory=nullptr;
	EXPORT_DIRECTORY* p_export=nullptr;

	p_directory=GetDirectoryEntryPtr(file_buffer,0);
	p_export=(EXPORT_DIRECTORY*)(&file_buffer[RVAtoFOA(p_directory->VirtualAddress,file_buffer)]);

	if(!p_export)
	{
		DbgPrintf(TEXT("RVAtoFOA UNsuccessfal.\n"));
		return nullptr;
	}
	
	int ord_base=p_export->Base;
	int fun_num=p_export->NumberOfFunctions;
	int name_num=p_export->NumberOfNames;
	void** ptr_fun_addr=(void**)(&file_buffer[RVAtoFOA(p_export->AddressOfFunctions,file_buffer)]);
	char** ptr_name_addr=(char**)(&file_buffer[RVAtoFOA(p_export->AddressOfNames,file_buffer)]);
	short* ptr_ord_addr=(short*)(&file_buffer[RVAtoFOA(p_export->AddressOfNameOrdinals,file_buffer)]);

	// printf(TEXT("debug: %s\n"),fun_ord);
	fun_ord-=ord_base;
	if(fun_ord<fun_num)
	{
		return (char*)(&file_buffer[RVAtoFOA((ULONG64)ptr_fun_addr[fun_ord],file_buffer)]);
	}
	return nullptr;

}


// 文件大小有可能大于最后一个节的文件偏移+其大小
int GetExtraSize(char* fpath,char* p)
{
	if(p==nullptr)
	{
		DbgPrintf(TEXT("isPEExtra: p is a nullptr.\n"));
		return 0;
	}
	DWORD file_size_1=GetFileSize(fpath);
	DWORD file_size_2=0;
	int section_num=GetFileHeadersPtr(p)->NumberOfSections;
	SECTION_HEADER* p_section=GetSectionHeadersPtr(p,section_num-1);
	file_size_2=p_section->PointerToRawData+p_section->SizeOfRawData;
	DbgPrintf(TEXT("getPEExtraSize: %d\n"),(file_size_1-file_size_2));
	return (file_size_1-file_size_2)>0?(file_size_1-file_size_2):-1;
	
}


// move export table
int MoveExportTable(char* file_buffer,char** new_section,DWORD* new_section_size)
{
	if(file_buffer==nullptr)
	{
		DbgPrintf(TEXT("moveExportTable: file_buffer is a nullptr.\n"));
		return 0;
	}

	int fun_num=0;
	int name_num=0;
	char* fun_addr=nullptr;
	char** name_addr=nullptr;
	DWORD name_total_size=0;
	DWORD export_table_size=40;
	short* ord_addr=nullptr;
	
	int section_align=0;
	int file_align=0;
	if(GetFileHeadersPtr(file_buffer)->Machine==0x14c)
	{
		section_align=GetOptionalHeadersPtr(file_buffer)->SectionAlignment;
		file_align=GetOptionalHeadersPtr(file_buffer)->FileAlignment;
	}else{
		section_align=GetOptionalHeaders64Ptr(file_buffer)->SectionAlignment;
		file_align=GetOptionalHeaders64Ptr(file_buffer)->FileAlignment;
	}
	int section_num=GetFileHeadersPtr(file_buffer)->NumberOfSections;
	SECTION_HEADER* p_section=GetSectionHeadersPtr(file_buffer,section_num-1);
	DATA_DIRECTORY* p_directory=GetDirectoryEntryPtr(file_buffer,0); 
	EXPORT_DIRECTORY* p_export=(EXPORT_DIRECTORY*)(&file_buffer[RVAtoFOA((ULONG64)(p_directory->VirtualAddress),file_buffer)]);

	fun_num=p_export->NumberOfFunctions;
	name_num=p_export->NumberOfNames;
	fun_addr=(&file_buffer[RVAtoFOA((ULONG64)p_export->AddressOfFunctions,file_buffer)]);
	name_addr=(char**)(&file_buffer[RVAtoFOA((ULONG64)p_export->AddressOfNames,file_buffer)]);
	ord_addr=(short*)(&file_buffer[RVAtoFOA((ULONG64)p_export->AddressOfNameOrdinals,file_buffer)]);
	
	//printf(TEXT("debug: %x %s(0x%08x) %d\n"),fun_addr[0],&file_buffer[RVAtoFOA((ULONG64)name_addr[0],file_buffer)],name_addr[0],ord_addr[0]);
	
	// 统计总函数名字大小
	for(int i=0;i<name_num;i++)
	{
		name_total_size+=(strlen(&file_buffer[RVAtoFOA((ULONG64)name_addr[i],file_buffer)])+1);  // 加上\0
	}
	// 拼接函数名
	char* name_total=(char*)malloc(name_total_size);
	if(name_total==nullptr)
	{
		DbgPrintf(TEXT("moveExportTable: name_total is a nullptr.\n"));
		return 0;
	}
	memset(name_total,0,name_total_size);
	name_total_size=0;
	for(int i=0;i<name_num;i++)
	{
		strcat(name_total,&file_buffer[RVAtoFOA((ULONG64)name_addr[i],file_buffer)]);
		sprintf(name_total,"%s ",name_total);
		name_addr[i]=(char*)(p_section->VirtualAddress+AutoAlign(p_section->Misc.VirtualSize,section_align)+fun_num*4+name_num*4+name_num*2+name_total_size);
		name_total_size=strlen(name_total);  // 加上\0
	}
	int i=0;
	while((DWORD)i<name_total_size)
	{
		if(name_total[i]==' ') name_total[i]='\0';
		i++;
	}
	
	new_section_size[0]=fun_num*4+name_num*4+name_num*2+name_total_size+export_table_size;
	new_section_size[0]=AutoAlign(AutoAlign(new_section_size[0],section_align),file_align);
	new_section[0] = (char*)malloc(new_section_size[0]);
	if(new_section[0]==nullptr)
	{
		DbgPrintf(TEXT("moveExportTable: new_section malloc fail.\n"));
		return 0;
	}

	// copy Functions table & modify AddressOfFunctions
	memcpy(new_section[0],fun_addr,fun_num*4);
	p_export->AddressOfFunctions=p_section->VirtualAddress+AutoAlign(p_section->Misc.VirtualSize,section_align);
	// copy NameOrdinals talbe & modify AddressOfNameOrdinals
	memcpy(&new_section[0][fun_num*4],ord_addr,name_num*2);
	p_export->AddressOfNameOrdinals=p_section->VirtualAddress+AutoAlign(p_section->Misc.VirtualSize,section_align)+fun_num*4;
	// copy AddressOfNames table & modify name address
	memcpy(&new_section[0][fun_num*4+name_num*2],name_addr,name_num*4);

	memcpy((char*) & new_section[0][fun_num * 4 + name_num * 2 + name_num * 4], (char*)name_total, name_total_size);
	p_export->AddressOfNames=p_section->VirtualAddress+AutoAlign(p_section->Misc.VirtualSize,section_align)+fun_num*4+name_num*2;
	// copy export table
	memcpy(&new_section[0][fun_num*4+name_num*2+name_num*4+name_total_size],(char*)p_export,40);
	p_directory->VirtualAddress=p_section->VirtualAddress+AutoAlign(p_section->Misc.VirtualSize,section_align)+fun_num*4+name_num*2+name_num*4+name_total_size;

	//printf(TEXT(":%x\n"),p_directory->VirtualAddress);
	/*
	name_total_size=0;
	for(i=0;i<fun_num;i++)
	{
		// printf(TEXT("%08x\n"),((int*)new_section[0])[i]);
		// printf(TEXT("%d\n"),(WORD)new_section[0][fun_num*4+i*2]);
		
		printf(TEXT("%08x\n"),name_addr[i]);
		// printf(TEXT("%08X\n"),(DWORD)new_section[0][fun_num*4+name_num*2+i*4]); 无法输出4字节数据? 以char*取数据得到1字节数据
		// printf(TEXT("%08X\n"),((DWORD*)&new_section[0][fun_num*4+name_num*2+i*4])[0]); // 应该以int*获取数据
		printf(TEXT("%s\n"),&new_section[0][fun_num*4+name_num*2+name_num*4+name_total_size]);
		name_total_size+=strlen(&new_section[0][fun_num*4+name_num*2+name_num*4+name_total_size])+1;
		
	}
	*/
	return 1;
}


// move relocation table
int MoveRelocationTable(char* file_buffer,char** new_section,DWORD* new_section_size)
{
	if(file_buffer==nullptr)
	{
		DbgPrintf(TEXT("moveExportTable: file_buffer is a nullptr.\n"));
		return 0;
	}

	int section_align=0;
	int file_align=0;
	if(GetFileHeadersPtr(file_buffer)->Machine==0x14c)
	{
		section_align=GetOptionalHeadersPtr(file_buffer)->SectionAlignment;
		file_align=GetOptionalHeadersPtr(file_buffer)->FileAlignment;
	}else{
		section_align=GetOptionalHeaders64Ptr(file_buffer)->SectionAlignment;
		file_align=GetOptionalHeaders64Ptr(file_buffer)->FileAlignment;
	}
	int section_num=GetFileHeadersPtr(file_buffer)->NumberOfSections;
	SECTION_HEADER* p_section=GetSectionHeadersPtr(file_buffer,section_num-1);
	DATA_DIRECTORY* p_directory=GetDirectoryEntryPtr(file_buffer,5); 
	BASE_RELOCATION* p_relocation=(BASE_RELOCATION*)(&file_buffer[RVAtoFOA((ULONG64)(p_directory->VirtualAddress),file_buffer)]);
	BASE_RELOCATION* p_relocation_=p_relocation;
	DWORD virtual_addr=0;
	DWORD block_size=0; 
	DWORD reloc_table_size=0;
	// int block_num=0;
	while(1)
	{
		virtual_addr=p_relocation_->VirtualAddress;
		block_size=p_relocation_->SizeOfBlock;
	
		if(virtual_addr==0&&block_size==0)
		{
			reloc_table_size+=8;
			break;
		}else{
			reloc_table_size+=block_size;
			p_relocation_=(BASE_RELOCATION*)((char*)p_relocation_+block_size);
		}

		
		
	}
	// printf(TEXT("debug: %x\n"),reloc_table_size);

	new_section_size[0]=AutoAlign(reloc_table_size,section_align);
	new_section[0]=(char*)malloc(new_section_size[0]);
	if(new_section[0]==nullptr)
	{
		DbgPrintf(TEXT("moveRelocationTable: new_section is a nullptr.\n"));
		return 0;
	}
	if(new_section_size[0]>= reloc_table_size) memcpy(new_section[0],(char*)p_relocation,reloc_table_size);
	
	p_directory->VirtualAddress=p_section->VirtualAddress+AutoAlign(p_section->Misc.VirtualSize,section_align);


	return 1;
}



// repair By Relocation Table
int repairByRelocaTable(char* file_buffer,DWORD old_img_base)
{
	if(file_buffer==nullptr)
	{
		DbgPrintf(TEXT("moveExportTable: file_buffer is a nullptr.\n"));
		return 0;
	}

	DWORD current_img_base=0;
	int img_delta=0;
	FILE_HEADER* p_stdpe=GetFileHeadersPtr(file_buffer);
	OPTIONAL_HEADER* p_optpe=nullptr;
	// optpe64_head* p_optpe64=nullptr;

	if(p_stdpe->Machine==0x14c)
	{
		p_optpe=GetOptionalHeadersPtr(file_buffer);
		current_img_base=p_optpe->ImageBase;
		img_delta=current_img_base-old_img_base;
		
		DbgPrintf(TEXT("img_delta: %x.\n"),img_delta);
	}else{
		DbgPrintf(TEXT("repairByRelocaTable: Not a x86 PE.\n"));
		return 0;
	}
	
	DATA_DIRECTORY* p_directory=nullptr;
	BASE_RELOCATION* p_relocation=nullptr;
	BASE_RELOCATION* p_relocation_=nullptr;
	DWORD virtual_addr=0;
	DWORD block_size=0; 
	p_directory=GetDirectoryEntryPtr(file_buffer,5);  // 重定位表位于第6目录项
	p_relocation=(BASE_RELOCATION*)(&file_buffer[RVAtoFOA((ULONG64)p_directory->VirtualAddress,file_buffer)]);
	p_relocation_=p_relocation;

	int block_item=0;
	int block_item_num=0;
	int block_item_type=0;

	int i=0,
		j=0;
	while(1)//virtual_addr!=0&&block_size!=0
	{

		// 重定向表结构体并不连续，
		p_relocation_=(BASE_RELOCATION*)((char*)p_relocation_+block_size);
		virtual_addr=p_relocation_->VirtualAddress;
		block_size=p_relocation_->SizeOfBlock;

		if(virtual_addr!=0&&block_size!=0)
		{
			block_item_num=(block_size-8)/2;
			
			for(j=0;j<block_item_num;j++)
			{
				block_item=((WORD*)(&p_relocation_[1]))[j]&4095; // 获取低12位
				block_item_type=((WORD*)(&p_relocation_[1]))[j]>>12;  //  获取高4位的值，
				// 类型为 3 就修改绝对内存地址
				if(block_item_type==3)
				{
					((DWORD*)(&file_buffer[(DWORD)RVAtoFOA((ULONG64)(block_item+virtual_addr),file_buffer)]))[0]+=img_delta;
				}
			}
		}else{
			break;
		}

		i++;
	}

	return 1;
}


